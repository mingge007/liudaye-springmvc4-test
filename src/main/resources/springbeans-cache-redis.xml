<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <!--<cache:annotation-driven cache-manager="cacheManager" />-->
    <!--<context:component-scan base-package="com.vv.**.service"/>-->

    <!-- 连接池配置. -->
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <!-- 连接池中最大连接数。高版本：maxTotal，低版本：maxActive -->
        <property name="maxTotal" value="8"/>
        <!-- 连接池中最大空闲的连接数. -->
        <property name="maxIdle" value="8"/>
        <!-- 连接池中最少空闲的连接数. -->
        <property name="minIdle" value="11"/>
        <!-- 当连接池资源耗尽时，调用者最大阻塞的时间，超时将跑出异常。单位，毫秒数;默认为-1.表示永不超时。高版本：maxWaitMillis，低版本：maxWait -->
        <property name="maxWaitMillis" value="1000"/>
        <!-- 连接空闲的最小时间，达到此值后空闲连接将可能会被移除。负值(-1)表示不移除. -->
        <property name="minEvictableIdleTimeMillis" value="1000"/>
        <!-- 对于“空闲链接”检测线程而言，每次检测的链接资源的个数。默认为3 -->
        <property name="numTestsPerEvictionRun" value="10"/>
        <!-- “空闲链接”检测线程，检测的周期，毫秒数。如果为负值，表示不运行“检测线程”。默认为-1. -->
        <property name="timeBetweenEvictionRunsMillis" value="1000"/>
        <!-- testOnBorrow:向调用者输出“链接”资源时，是否检测是有有效，如果无效则从连接池中移除，并尝试获取继续获取。默认为false。建议保持默认值. -->
        <!-- testOnReturn:向连接池“归还”链接时，是否检测“链接”对象的有效性。默认为false。建议保持默认值. -->
        <!-- testWhileIdle:向调用者输出“链接”对象时，是否检测它的空闲超时；默认为false。如果“链接”空闲超时，将会被移除。建议保持默认值. -->
        <!-- whenExhaustedAction:当“连接池”中active数量达到阀值时，即“链接”资源耗尽时，连接池需要采取的手段, 默认为1(0:抛出异常。1:阻塞，直到有可用链接资源。2:强制创建新的链接资源) -->
    </bean>


    <!-- 以下是spring-data-redis配置方式 -->
    <bean id="sentinelConfig"
          class="org.springframework.data.redis.connection.RedisSentinelConfiguration">
        <constructor-arg name="master" value="mymaster_music_test"/>
        <constructor-arg name="sentinelHostAndPorts">
            <set>
                <value>114.112.92.159:26379</value>
            </set>
        </constructor-arg>
    </bean>

    <!--jedis链接工厂-->
    <bean id="jedisConnectionFactory"
          class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" p:password="51vv.com"
          p:database="11" p:convertPipelineAndTxResults="true">
        <!--哨兵模式-->
        <constructor-arg ref="sentinelConfig"/>
    </bean>
    <!--哨兵模式-redis从库链接工厂-->
    <bean id="jedisSlaveConnectionFactory"
          class="com.vv.springcache.redis.slavesupport.JedisSentinelSlaveConnectionFactory" p:password="51vv.com"
          p:database="11" p:convertPipelineAndTxResults="true">
        <!--哨兵模式-->
        <constructor-arg ref="sentinelConfig"/>
    </bean>

    <!--主库-->
    <bean id="cacheRedisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="jedisConnectionFactory"/>
        <property name="keySerializer" ref="stringRedisSerializer"/>
        <property name="hashKeySerializer" ref="stringRedisSerializer"/>
        <property name="valueSerializer" ref="jsonSerializer"/>
        <property name="hashValueSerializer" ref="jsonSerializer"/>
    </bean>

    <!--从库-->
    <bean id="cacheSlaveRedisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="jedisSlaveConnectionFactory"/>
        <property name="keySerializer" ref="stringRedisSerializer"/>
        <property name="hashKeySerializer" ref="stringRedisSerializer"/>
        <property name="valueSerializer" ref="jsonSerializer"/>
        <property name="hashValueSerializer" ref="jsonSerializer"/>
    </bean>

    <!--支持主从读写分离redis操作组-->
    <bean id="masterAndSlaveRedisGroup" class="com.vv.springcache.redis.slavesupport.MasterAndSlaveRedisGroup">
        <constructor-arg index="0" ref="cacheRedisTemplate"></constructor-arg>
        <constructor-arg index="1" ref="cacheSlaveRedisTemplate"></constructor-arg>
        <property name="expires" value="600"/>
    </bean>

    <!--<cache:annotation-driven/>-->
    <bean id="cacheManager" class="com.vv.springcache.redis.VVRedisCacheManager">
        <constructor-arg ref="masterAndSlaveRedisGroup"></constructor-arg>
        <property name="masterAndSlaveRedisGroupMap">
            <map>
                <entry key="cacheA" value-ref="masterAndSlaveRedisGroup"/>
                <entry key="cacheB" value-ref="masterAndSlaveRedisGroup"/>
                <entry key="cacheC" value-ref="masterAndSlaveRedisGroup"/>
            </map>
        </property>
        <!--是否支持事物-->
        <property name="transactionAware" value="true"/>
        <property name="defaultExpiration" value="300"/>
    </bean>

    <bean id="stringRedisSerializer" class="org.springframework.data.redis.serializer.StringRedisSerializer"/>

    <bean id="myObjectMapper" class="com.vv.springcache.redis.VVObjectMapper"></bean>

    <bean id="jsonSerializer" class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer">
        <constructor-arg name="mapper" ref="myObjectMapper"></constructor-arg>
    </bean>

    <bean id="stringRedisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
        <property name="connectionFactory" ref="jedisConnectionFactory"/>
        <!-- 开启事务 -->
        <property name="enableTransactionSupport" value="true"></property>
    </bean>

</beans>